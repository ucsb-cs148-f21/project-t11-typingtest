{"ast":null,"code":"import _toConsumableArray from\"C:/Users/jason/Desktop/project-t11-typingtest/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"C:/Users/jason/Desktop/project-t11-typingtest/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/jason/Desktop/project-t11-typingtest/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/jason/Desktop/project-t11-typingtest/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/jason/Desktop/project-t11-typingtest/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component,useEffect,useState}from\"react\";import\"./styles.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TypingComponent=/*#__PURE__*/function(_Component){_inherits(TypingComponent,_Component);var _super=_createSuper(TypingComponent);function TypingComponent(){var _this;_classCallCheck(this,TypingComponent);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={text:_this.props.text,textID:_this.props.textID,inputValue:\"\",lastLetter:\"\",words:[],completedWords:[],completed:false,startTime:undefined,timeElapsed:0,wpm:0,started:false,progress:0,lineCount:0,lineWCompleted:0};_this.setText=function(){var wordsE=_this.state.text.split(\" \");var words=wordsE.filter(function(x){return x!=\"\";});console.log(words);_this.setState({words:words,completedWords:[]});};_this.startGame=function(){_this.setText();_this.setState({started:true,startTime:Date.now(),completed:false,progress:0,lineCount:0,lineWCompleted:0});};_this.handleChange=function(e){var _this$state=_this.state,words=_this$state.words,completedWords=_this$state.completedWords,lineWCompleted=_this$state.lineWCompleted;var inputValue=e.target.value;var lastLetter=inputValue[inputValue.length-1];var currentWord=words[0];console.log(currentWord,\"currentWord\");// if space or '.', check the word\nif(lastLetter===\" \"){// check to see if it matches to the currentWord\n// trim because it has the space\nif(inputValue.trim()===currentWord){// remove the word from the wordsArray\n// cleanUp the input\nvar newWords=_toConsumableArray(words.slice(1));console.log(newWords,\"newWords\");console.log(newWords.length,\"newWords.length\");var newCompletedWords=[].concat(_toConsumableArray(completedWords),[currentWord]);console.log(newCompletedWords,\"newCompletedWords\");console.log(\"----------------\");var newLineWCompleted=lineWCompleted+1;// Get the total progress by checking how much words are left\nvar progress=newCompletedWords.length/(newWords.length+newCompletedWords.length)*100;_this.setState({words:newWords,completedWords:newCompletedWords,inputValue:\"\",completed:newWords.length===0,progress:progress,lineWCompleted:newLineWCompleted});}}else{_this.setState({inputValue:inputValue,lastLetter:lastLetter});console.log(_this.state.inputValue,\"this.state.inputValue\");console.log(_this.state.lastLetter,\"this.state.lastLetter\");console.log(\"================================\");}_this.calculateWPM();};_this._handleKeyPress=function(e){var inputValue=e.target.value;if(e.key==='Enter'){var _this$state2=_this.state,words=_this$state2.words,completedWords=_this$state2.completedWords,lineCount=_this$state2.lineCount,lineWCompleted=_this$state2.lineWCompleted;var currentWord=words[0];console.log(currentWord,\"currentWord\");if(currentWord==inputValue+\"\\n\"){var newWords=_toConsumableArray(words.slice(1));console.log(newWords,\"newWords\");console.log(newWords.length,\"newWords.length\");var newCompletedWords=[].concat(_toConsumableArray(completedWords),[currentWord]);console.log(newCompletedWords,\"newCompletedWords\");console.log(\"----------------\");var newLineCount=lineCount+1;// Get the total progress by checking how much words are left\nvar progress=newCompletedWords.length/(newWords.length+newCompletedWords.length)*100;_this.setState({words:newWords,completedWords:newCompletedWords,inputValue:\"\",completed:newWords.length===0,progress:progress,lineCount:newLineCount,lineWCompleted:0});}}_this.calculateWPM();};_this.calculateWPM=function(){var _this$state3=_this.state,startTime=_this$state3.startTime,completedWords=_this$state3.completedWords;var now=Date.now();var diff=(now-startTime)/1000/60;// 1000 ms / 60 s\nconsole.log(now,\"now\");console.log(startTime,\"startTime\");console.log(diff,\"diff\");console.log(\"**************\");// every word is considered to have 5 letters\n// so here we are getting all the letters in the words and divide them by 5\n// \"my\" shouldn't be counted as same as \"deinstitutionalization\"\nvar wordsTyped=Math.ceil(completedWords.reduce(function(acc,word){return acc+=word.length;},0)/5);console.log(completedWords,\"completedWords\");console.log(wordsTyped,\"wordsTyped\");console.log(\"+=+=+=+=+=+=\");// calculating the wpm\nvar wpm=Math.ceil(wordsTyped/diff);_this.setState({wpm:wpm,timeElapsed:diff});};return _this;}_createClass(TypingComponent,[{key:\"componentDidMount\",value:function componentDidMount(){console.log(this.state.text);}},{key:\"render\",value:function render(){var _this$state4=this.state,text=_this$state4.text,inputValue=_this$state4.inputValue,completedWords=_this$state4.completedWords,wpm=_this$state4.wpm,timeElapsed=_this$state4.timeElapsed,started=_this$state4.started,completed=_this$state4.completed,progress=_this$state4.progress,lineCount=_this$state4.lineCount,lineWCompleted=_this$state4.lineWCompleted;if(!started)return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Welcome to the Typing game\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Rules:\"}),\" \",/*#__PURE__*/_jsx(\"br\",{}),\"Type in the input field the highlighted word. \",/*#__PURE__*/_jsx(\"br\",{}),\"The correct words will turn \",/*#__PURE__*/_jsx(\"span\",{className:\"green\",children:\"green\"}),\".\",/*#__PURE__*/_jsx(\"br\",{}),\"Incorrect letters will turn \",/*#__PURE__*/_jsx(\"span\",{className:\"red\",children:\"red\"}),\".\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"Have fun!\"]}),/*#__PURE__*/_jsx(\"button\",{className:\"start-btn\",onClick:this.startGame,children:\"Start game\"})]});if(!text)return/*#__PURE__*/_jsx(\"p\",{children:\"Loading...\"});if(completed){var requestOptions={method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userID:this.state.user.id.toString().substr(0,17),problemID:this.state.textID})//userID: this.state.user.id, problemID: this.state.textID\n//body: JSON.stringify({ userID: 43531, problemID: this.state.textID}) //userID: this.state.user.id, problemID: this.state.textID\n};fetch(fetchURL,requestOptions).catch(function(err){return console.error(err);});return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Your WPM is \",/*#__PURE__*/_jsx(\"strong\",{children:wpm})]}),/*#__PURE__*/_jsx(\"button\",{className:\"start-btn\",onClick:this.startGame,children:\"Play again\"})]});}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"wpm\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"WPM: \"}),wpm,/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"strong\",{children:\"Time: \"}),Math.floor(timeElapsed*60),\"s\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Type the text below\"}),/*#__PURE__*/_jsx(\"progress\",{value:progress,max:\"100\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text\",children:text.split(\"\\n\").map(function(line,li_idx){var indent=0;for(var i=0;i<line.length;i++){if(line[i]==\" \"){indent++;}else{break;}}return/*#__PURE__*/_jsx(\"div\",{children:line.split(\" \").map(function(word,w_idx){var highlight=false;var currentWord=false;// this means that the word is completed, so turn it green\nif(lineWCompleted+indent>w_idx&&li_idx==lineCount||li_idx<lineCount){highlight=true;}if(lineWCompleted+indent===w_idx&&lineCount==li_idx){currentWord=true;}return/*#__PURE__*/_jsx(\"span\",{className:\"word \\n                                  \".concat(highlight&&\"green\",\" \\n                                  \").concat(currentWord&&\"underline\"),children:word.split(\"\").map(function(letter,l_idx){var isCurrentWord=w_idx===lineWCompleted+indent&&li_idx==lineCount;var isWronglyTyped=letter!==inputValue[l_idx]&&li_idx==lineCount;var shouldBeHighlighted=l_idx<inputValue.length&&li_idx==lineCount;return/*#__PURE__*/_jsx(\"span\",{className:\"letter \".concat(isCurrentWord&&shouldBeHighlighted?isWronglyTyped?\"red\":\"green\":\"\"),children:letter},l_idx);})},w_idx);})},li_idx);})}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",onChange:this.handleChange,onKeyPress:this._handleKeyPress,value:inputValue// autoFocus={started ? 'true' : 'false'}\n,autoFocus:true})]})]});}}]);return TypingComponent;}(Component);export default TypingComponent;","map":{"version":3,"sources":["C:/Users/jason/Desktop/project-t11-typingtest/src/components/TypingComponent.js"],"names":["React","Component","useEffect","useState","TypingComponent","state","text","props","textID","inputValue","lastLetter","words","completedWords","completed","startTime","undefined","timeElapsed","wpm","started","progress","lineCount","lineWCompleted","setText","wordsE","split","filter","x","console","log","setState","startGame","Date","now","handleChange","e","target","value","length","currentWord","trim","newWords","slice","newCompletedWords","newLineWCompleted","calculateWPM","_handleKeyPress","key","newLineCount","diff","wordsTyped","Math","ceil","reduce","acc","word","requestOptions","method","headers","body","JSON","stringify","userID","user","id","toString","substr","problemID","fetch","fetchURL","catch","err","error","floor","map","line","li_idx","indent","i","w_idx","highlight","letter","l_idx","isCurrentWord","isWronglyTyped","shouldBeHighlighted"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nclass TypingComponent extends Component {\r\n  state = {\r\n    text: this.props.text,\r\n    textID: this.props.textID,\r\n    inputValue: \"\",\r\n    lastLetter: \"\",\r\n    words: [],\r\n    completedWords: [],\r\n    completed: false,\r\n    startTime: undefined,\r\n    timeElapsed: 0,\r\n    wpm: 0,\r\n    started: false,\r\n    progress: 0,\r\n    lineCount: 0,\r\n    lineWCompleted: 0\r\n  };\r\n  componentDidMount(){\r\n    console.log(this.state.text)\r\n  }\r\n  setText = () => {\r\n    const wordsE = this.state.text.split(\" \");\r\n    const words = wordsE.filter(x => x != \"\");\r\n    console.log(words);\r\n    this.setState({\r\n      words: words,\r\n      completedWords: []\r\n    });\r\n  };\r\n\r\n  startGame = () => {\r\n    this.setText();\r\n\r\n    this.setState({\r\n      started: true,\r\n      startTime: Date.now(),\r\n      completed: false,\r\n      progress: 0,\r\n      lineCount: 0,\r\n      lineWCompleted: 0\r\n    });\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { words, completedWords, lineWCompleted } = this.state;\r\n    const inputValue = e.target.value;\r\n    const lastLetter = inputValue[inputValue.length - 1];\r\n\r\n    const currentWord = words[0];\r\n    console.log(currentWord, \"currentWord\");\r\n\r\n    // if space or '.', check the word\r\n    if (lastLetter === \" \") {\r\n      // check to see if it matches to the currentWord\r\n      // trim because it has the space\r\n      if (inputValue.trim() === currentWord) {\r\n        // remove the word from the wordsArray\r\n        // cleanUp the input\r\n        const newWords = [...words.slice(1)];\r\n        console.log(newWords, \"newWords\");\r\n        console.log(newWords.length, \"newWords.length\");\r\n        const newCompletedWords = [...completedWords, currentWord];\r\n        console.log(newCompletedWords, \"newCompletedWords\");\r\n        console.log(\"----------------\");\r\n        const newLineWCompleted = lineWCompleted+1;\r\n\r\n        // Get the total progress by checking how much words are left\r\n        const progress =\r\n          (newCompletedWords.length /\r\n            (newWords.length + newCompletedWords.length)) *\r\n          100;\r\n        this.setState({\r\n          words: newWords,\r\n          completedWords: newCompletedWords,\r\n          inputValue: \"\",\r\n          completed: newWords.length === 0,\r\n          progress: progress,\r\n          lineWCompleted: newLineWCompleted\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        inputValue: inputValue,\r\n        lastLetter: lastLetter\r\n      });\r\n      console.log(this.state.inputValue, \"this.state.inputValue\");\r\n      console.log(this.state.lastLetter, \"this.state.lastLetter\");\r\n      console.log(\"================================\");\r\n    }\r\n\r\n    this.calculateWPM();\r\n  };\r\n\r\n  _handleKeyPress = (e) => {\r\n    const inputValue = e.target.value;\r\n    if (e.key === 'Enter'){\r\n      const { words, completedWords, lineCount, lineWCompleted } = this.state;\r\n\r\n      const currentWord = words[0];\r\n      console.log(currentWord, \"currentWord\");\r\n      \r\n      if (currentWord == inputValue + \"\\n\"){\r\n        const newWords = [...words.slice(1)];\r\n        console.log(newWords, \"newWords\");\r\n        console.log(newWords.length, \"newWords.length\");\r\n        const newCompletedWords = [...completedWords, currentWord];\r\n        console.log(newCompletedWords, \"newCompletedWords\");\r\n        console.log(\"----------------\");\r\n        const newLineCount = lineCount+1;\r\n\r\n        // Get the total progress by checking how much words are left\r\n        const progress =\r\n          (newCompletedWords.length /\r\n            (newWords.length + newCompletedWords.length)) *\r\n          100;\r\n        this.setState({\r\n          words: newWords,\r\n          completedWords: newCompletedWords,\r\n          inputValue: \"\",\r\n          completed: newWords.length === 0,\r\n          progress: progress,\r\n          lineCount: newLineCount,\r\n          lineWCompleted: 0\r\n        });\r\n      }\r\n    }\r\n    this.calculateWPM();\r\n  } \r\n\r\n  calculateWPM = () => {\r\n    const { startTime, completedWords } = this.state;\r\n    const now = Date.now();\r\n    const diff = (now - startTime) / 1000 / 60; // 1000 ms / 60 s\r\n    console.log(now, \"now\");\r\n    console.log(startTime, \"startTime\");\r\n    console.log(diff, \"diff\");\r\n    console.log(\"**************\");\r\n\r\n    // every word is considered to have 5 letters\r\n    // so here we are getting all the letters in the words and divide them by 5\r\n    // \"my\" shouldn't be counted as same as \"deinstitutionalization\"\r\n    const wordsTyped = Math.ceil(\r\n      completedWords.reduce((acc, word) => (acc += word.length), 0) / 5\r\n    );\r\n    console.log(completedWords, \"completedWords\");\r\n    console.log(wordsTyped, \"wordsTyped\");\r\n    console.log(\"+=+=+=+=+=+=\");\r\n\r\n    // calculating the wpm\r\n    const wpm = Math.ceil(wordsTyped / diff);\r\n\r\n    this.setState({\r\n      wpm: wpm,\r\n      timeElapsed: diff\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      text,\r\n      inputValue,\r\n      completedWords,\r\n      wpm,\r\n      timeElapsed,\r\n      started,\r\n      completed,\r\n      progress,\r\n      lineCount,\r\n      lineWCompleted\r\n    } = this.state;\r\n\r\n    if (!started)\r\n      return (\r\n        <div className=\"container\">\r\n          <h2>Welcome to the Typing game</h2>\r\n          <p>\r\n            <strong>Rules:</strong> <br />\r\n            Type in the input field the highlighted word. <br />\r\n            The correct words will turn <span className=\"green\">green</span>.\r\n            <br />\r\n            Incorrect letters will turn <span className=\"red\">red</span>.\r\n            <br />\r\n            <br />\r\n            Have fun!\r\n          </p>\r\n          <button className=\"start-btn\" onClick={this.startGame}>\r\n            Start game\r\n          </button>\r\n        </div>\r\n      );\r\n\r\n    if (!text) return <p>Loading...</p>;\r\n\r\n    if (completed) {\r\n      const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ userID: this.state.user.id.toString().substr(0, 17), problemID: this.state.textID}) //userID: this.state.user.id, problemID: this.state.textID\r\n        //body: JSON.stringify({ userID: 43531, problemID: this.state.textID}) //userID: this.state.user.id, problemID: this.state.textID\r\n    };\r\n    fetch(fetchURL, requestOptions)\r\n        .catch(err => console.error(err));\r\n      return (\r\n        <div className=\"container\">\r\n          <h2>\r\n            Your WPM is <strong>{wpm}</strong>\r\n          </h2>\r\n          <button className=\"start-btn\" onClick={this.startGame}>\r\n            Play again\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"wpm\">\r\n          <strong>WPM: </strong>\r\n          {wpm}\r\n          <br />\r\n          <strong>Time: </strong>\r\n          {Math.floor(timeElapsed * 60)}s\r\n        </div>\r\n        <div className=\"container\">\r\n          <h4>Type the text below</h4>\r\n          <progress value={progress} max=\"100\" />\r\n          <p className=\"text\">\r\n            {text.split(\"\\n\").map((line, li_idx) => {\r\n              let indent = 0;\r\n              for (let i = 0; i < line.length; i++){\r\n                if (line[i] == \" \"){\r\n                  indent++;\r\n                }\r\n                else{\r\n                  break;\r\n                }\r\n              }\r\n              return(\r\n              <div key = {li_idx}>\r\n              {line.split(\" \").map((word, w_idx) => {\r\n                let highlight = false;\r\n                let currentWord = false;\r\n\r\n                // this means that the word is completed, so turn it green\r\n                if ((lineWCompleted+indent > w_idx && li_idx == lineCount) || li_idx < lineCount) {\r\n                  highlight = true;\r\n                }\r\n\r\n                if (lineWCompleted+indent === w_idx && lineCount == li_idx) {\r\n                  currentWord = true;\r\n                }\r\n\r\n                return (\r\n                  <span\r\n                    className={`word \r\n                                  ${highlight && \"green\"} \r\n                                  ${currentWord && \"underline\"}`}\r\n                    key={w_idx}\r\n                  >\r\n                    {word.split(\"\").map((letter, l_idx) => {\r\n                      const isCurrentWord = w_idx === lineWCompleted+indent && li_idx == lineCount;\r\n                      const isWronglyTyped = letter !== inputValue[l_idx] && li_idx == lineCount;\r\n                      const shouldBeHighlighted = l_idx < inputValue.length && li_idx == lineCount;\r\n\r\n                      return (\r\n                        <span\r\n                          className={`letter ${\r\n                            isCurrentWord && shouldBeHighlighted\r\n                              ? isWronglyTyped\r\n                                ? \"red\"\r\n                                : \"green\"\r\n                              : \"\"\r\n                          }`}\r\n                          key={l_idx}\r\n                        >\r\n                          {letter}\r\n                        </span>\r\n                      );\r\n                    })}\r\n                  </span>\r\n                );\r\n              })}\r\n              </div>\r\n              );\r\n            })}\r\n            </p>\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handleChange}\r\n            onKeyPress={this._handleKeyPress}\r\n            value={inputValue}\r\n            // autoFocus={started ? 'true' : 'false'}\r\n            autoFocus={true}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TypingComponent;"]},"metadata":{},"sourceType":"module"}